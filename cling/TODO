good textile + syntax highlighting
  Inline code: @(+ 1 2)@ or @@(+ 1 2)@@ or @@:clj (+ 1 2)@@ or
               <code>(+ 1 2)</code>  or <code:clj>(+ 1 2)</code>
  Block code: 
  @@
  (def plus [x y]
    (+ 1 2))
  @@
  or
  @@:clj
  (def plus [x y]
    (+ 1 2))
  @@
  or
  <code>
  (def plus [x y]
    (+ 1 2))
  </code>
  or
  <code:clj>
  (def plus [x y]
    (+ 1 2))
  </code>

  <pre><code> - allowing would make us a nice superset of textile  
  How are you going to put @@ on the wiki!!! use diff. syntax for each??  

  /pages/foo-bar:"Foo Bar" for external links,
  [[Foo Bar]], for internal links to allow tracking??
  note that we should disallow overlapping permalinks foo-2 etc.  

diffs

search - in layout, on top
  LIKE
    note injection
    pagination integration
  Batched lucene
    pagination integration
  or not?

users

examples
  http://webhooks.pbwiki.com/
  http://wiki.github.com/mislav/will_paginate
  http://wiki.merbivore.org

pages like on github for the most n frequently-accessed pages, then link more

pretty date formatting
  server side
  relative formating client side

edits/version/history in code/text/urls

diff content in feeds

notion of "Wiki title"
  perhaps app config and installation config, the later for things like title

app-level analytics (cool features, like nav paths)

link -> link-to ?
  what was the original reason not?

permalink -> slug
  permalink is overloaded, may want to change slug, shorter

restart with routing / interaction with cofig

assets / image uploads
  public "caching"

reload command for console

optomistic locking

controllers require in .app

add-column vector or not?

nofollow on links, like on crunchbase

(stash/find-one-by +page+ {:permalink (params req :permalink)})

"powered by Cling"

not-found on returning nil?

not that "versions" and "new" etc must be reserved permalinks

perhaps we can eliminate a lot of these (respond "foo") things - just ret. "foo"
perhaps ["foo" {:status 404}] for respond shorthand

find ways to shorten and eliminate tokens

not happy about no use of lets in defxml

what escaping is required with textilize??

perhaps auto-discovery-link tag api should be more like link(-to), perhaps shorter name

optional route tails
  /posts(/page/:page)
  need to consider recognition and generation semantics
  better than query params woot!